name: CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build-android:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
        
    - name: Install MAUI workload
      run: dotnet workload install maui
      
    # Configurazione Firebase
    - name: Setup Firebase configuration
      run: |
        echo "${{ secrets.FIREBASE_CONFIG }}" > firebase-config.json
        
        # Verifica che il file sia stato creato correttamente
        if (Test-Path -Path "firebase-config.json") {
          Write-Host "Firebase configuration file created successfully"
        } else {
          Write-Error "Failed to create Firebase configuration file"
          exit 1
        }
        
        mkdir -p Platforms/Android
        echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > Platforms/Android/google-services.json
        
        # Verifica che il file sia stato creato correttamente
        if (Test-Path -Path "Platforms/Android/google-services.json") {
          Write-Host "Firebase Android configuration file created successfully"
        } else {
          Write-Error "Failed to create Firebase Android configuration file"
          exit 1
        }
    
    # Aggiornamento automatico della versione se viene utilizzato un tag
    - name: Debug - List directory structure
      run: |
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Directory structure:"
        Get-ChildItem -Path . -Recurse -Depth 2 | Where-Object { -not $_.PSIsContainer } | Select-Object FullName
      shell: pwsh

    - name: Update version
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        $version = "${{ github.ref }}".Substring(11)  # Rimuove 'refs/tags/v'
        
        # Trova il file .csproj
        $csprojFiles = Get-ChildItem -Path . -Recurse -Filter "*.csproj" | Select-Object -ExpandProperty FullName
        Write-Host "Found .csproj files:"
        $csprojFiles | ForEach-Object { Write-Host "  $_" }
        
        # Usa il primo file .csproj trovato
        $csprojPath = $csprojFiles | Select-Object -First 1
        Write-Host "Using project file: $csprojPath"
        
        # Leggi e modifica il file
        $csproj = Get-Content $csprojPath
        $csproj = $csproj -replace '<ApplicationDisplayVersion>.*</ApplicationDisplayVersion>', "<ApplicationDisplayVersion>$version</ApplicationDisplayVersion>"
        $buildNumber = [int]($csproj -match '<ApplicationVersion>(\d+)</ApplicationVersion>' | ForEach-Object { $matches[1] })
        $buildNumber++
        $csproj = $csproj -replace '<ApplicationVersion>.*</ApplicationVersion>', "<ApplicationVersion>$buildNumber</ApplicationVersion>"
        Set-Content $csprojPath $csproj
        
        Write-Host "Updated version to $version (build $buildNumber)"
      shell: pwsh
      
    - name: Build Android app
      run: dotnet publish -f net9.0-android -c Release
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4  # Cambiato da v3 a v4
      with:
        name: android-app
        path: bin/Release/net9.0-android/*-Signed.apk
        
    # Opzionale: Crea una release GitHub quando viene creato un tag
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: bin/Release/net9.0-android/*-Signed.apk
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Notifiche di stato della pipeline
  notify:
    needs: [build-android]  # Modificato per dipendere solo da build-android
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: "✅ Deployment completato con successo"
        SLACK_MESSAGE: "L'app ClimbTrack è stata distribuita con successo"
        
    - name: Notify on failure
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: danger
        SLACK_TITLE: "❌ Deployment fallito"
        SLACK_MESSAGE: "Si è verificato un errore durante il deployment dell'app ClimbTrack"